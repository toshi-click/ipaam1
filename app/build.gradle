// 必須
apply plugin: 'com.android.application'
// kotlin関連 kotlin系のapplyは他のapplyの後にやったほうが問題が少ない
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

// バージョン番号を変数にしたほうがバージョン管理した時わかりやすかった
def versionMajor = 0
def versionMinor = 1
def versionPatch = 0

// パッケージ名定数にしておく
def packageName = "click.toshi.ipaam1"

// SDK versions
ext.compile_sdk_version = "27"
// show SDK Manager → SDK Tools Tabs → Checked「Show Package Details」(Right Bottom)
ext.build_tools_version = "27.0.3"
// 最低サポートAndroidバージョン
ext.min_sdk_version = "24"
// 最大サポートAndroidバージョン
ext.target_sdk_version = "27"

android {
    flavorDimensions "default"
    compileSdkVersion compile_sdk_version as int
    buildToolsVersion build_tools_version
    defaultConfig {
        applicationId packageName
        minSdkVersion min_sdk_version as int
        targetSdkVersion target_sdk_version as int
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {
        getByName("debug") {
            storeFile = rootProject.file("debug.jks")
            storePassword = "debugdebug"
            keyAlias = "debugdebug"
            keyPassword = "debugdebug"
        }
        create("release") {
            storeFile = rootProject.file("release.jks")
            storePassword = System.getenv("RELEASE_STORE_PASSWORD")
            keyAlias = System.getenv("RELEASE_KEY_ALIAS")
            keyPassword = System.getenv("RELEASE_KEY_PASSWORD")
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            useProguard false
            signingConfig signingConfigs.debug
            applicationIdSuffix '.debug'
            versionNameSuffix "-debug"
            debuggable true
            zipAlignEnabled true
            testCoverageEnabled true
        }
        release {
            signingConfig signingConfigs.release
            debuggable false
            zipAlignEnabled true
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
//    productFlavors {
//        develop {
//            applicationId "${packageName}.develop"
//            dimension "default"
//        }
//        staging {
//            applicationId "${packageName}.staging"
//            dimension "default"
//        }
//        production {
//            applicationId packageName
//            dimension "default"
//        }
//    }
    // Lintのオプション指定
    lintOptions {
        // issue IDを設定することで、設定したissue IDを無視
        disable 'InvalidPackage'
        // falseを設定することで、build中にlintのエラーが出てもbuildを止めないようにする
        abortOnError false
        // textReportとtextOutputを設定するとコマンドラインのビルドでlintのwarningやerrorが表示されるので
        // たとえばCIがlint errorで落ちたときに手元でlintを走らせることなく原因がわかる
        textReport true
        textOutput 'stdout'
        // lintの設定ファイルを指定
        lintConfig file("lint.xml")
    }
    testOptions {
        unitTests.all {
            // configure the set of classes for JUnit tests
            include project.hasProperty("testFilter") ? "**/*${project.ext.testFilter}*Test.class" : '**/*Test.class'
            exclude '**/espresso/**/*.class'
            // configure max heap size of the test JVM
            maxHeapSize = '2048m'
            // configure the test JVM arguments
            jvmArgs '-XX:MaxPermSize=512m', '-XX:-UseSplitVerifier'
            // Specify max number of processes (default is 1)
            maxParallelForks = 1
            // Specify max number of test classes to execute in a test process
            // before restarting the process (default is unlimited)
            forkEvery = 150
            // configure whether failing tests should fail the build
            ignoreFailures false
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardError'
            }
        }
    }
}
// Library versions (com.android.support:)
ext.support_lib_version = "27.1.1"

ext.arch_runtime_version = "1.1.1"
ext.arch_version = "1.1.1"
ext.dagger_version = "2.15"
ext.moshi_version = "1.5.0"
ext.retrofit_version = "2.3.0"
ext.okhttp_version = "3.9.0"
ext.glide_version = "4.2.0"

dependencies {
    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // support libs
    implementation "com.android.support:appcompat-v7:$support_lib_version"
    implementation "com.android.support:support-v4:${support_lib_version}"
    implementation "com.android.support:recyclerview-v7:$support_lib_version"
    implementation "com.android.support:cardview-v7:$support_lib_version"
    implementation "com.android.support:design:$support_lib_version"
    implementation "com.android.support:animated-vector-drawable:$support_lib_version"
    implementation "com.android.support.constraint:constraint-layout:1.1.3"
    kapt 'com.android.databinding:compiler:3.1.4'

    // firebase
    // https://firebase.google.com/docs/android/setup?hl=ja#available_libraries
    implementation "com.google.firebase:firebase-core:16.0.3"
    implementation "com.crashlytics.sdk.android:crashlytics:2.9.5"
    implementation "com.google.firebase:firebase-auth:16.0.3"
    implementation "com.google.firebase:firebase-database:16.0.2"
    implementation "com.google.firebase:firebase-firestore:17.1.0"
    implementation "com.google.firebase:firebase-storage:16.0.2"
    implementation "com.google.firebase:firebase-messaging:17.3.2"
    implementation "com.google.firebase:firebase-ads:15.0.1"

    // architecture components
    implementation "android.arch.lifecycle:runtime:$arch_runtime_version"
    implementation "android.arch.lifecycle:extensions:$arch_version"
    implementation "android.arch.lifecycle:reactivestreams:$arch_version"
    kapt "android.arch.lifecycle:compiler:$arch_version"

    // dagger
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // reactive
    implementation "io.reactivex.rxjava2:rxjava:2.1.13"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.2"
    implementation "io.reactivex.rxjava2:rxkotlin:2.2.0"

    // data
    implementation "com.squareup.moshi:moshi:$moshi_version"
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    implementation "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    implementation "com.github.bumptech.glide:okhttp-integration:$glide_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    implementation "com.jakewharton.timber:timber:4.7.0"

    // 自作ライブラリは最後に読み込むように
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
}
// MUST BE AT THE BOTTOM
// firebaseでgoogle-services.jsonを生成してから有効にすること
apply plugin: 'com.google.gms.google-services'
