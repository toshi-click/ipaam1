// 必須
apply plugin: 'com.android.application'
// 依存ライブラリの最新バージョンをチェック
apply plugin: 'com.github.ben-manes.versions'
// kotlin関連 kotlin系のapplyは他のapplyの後にやったほうが問題が少ないそうなので下の方に。
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

// バージョン番号を変数にしたほうがバージョン管理した時わかりやすかった
def versionMajor = 0
def versionMinor = 1
def versionPatch = 0

// パッケージ名定数にしておく
def packageName = "click.toshi.apaam1"

android {
    flavorDimensions "default"
    compileSdkVersion compile_sdk_version as int
    buildToolsVersion build_tools_version
    // kotlinのソースフォルダをsrc系のフォルダとして認識させる
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        develop.java.srcDirs += 'src/develop/kotlin'
        staging.java.srcDirs += 'src/staging/kotlin'
        production.java.srcDirs += 'src/production/kotlin'
    }
    defaultConfig {
        multiDexEnabled true
        applicationId packageName
        minSdkVersion min_sdk_version as int
        targetSdkVersion target_sdk_version as int
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true
        buildConfigField "String", "DEFAULT_TIMEZONE", "\"Asia/Tokyo\""
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {
        debug {
            storeFile rootProject.file("debug.jks")
            storePassword "debugdebug"
            keyAlias "debug"
            keyPassword "debugdebug"
        }
        release {
            // システム環境変数にパスワードなど設定する
            storeFile rootProject.file("release.jks")
            storePassword System.getenv("RELEASE_STORE_PASSWORD")
            keyAlias System.getenv("RELEASE_KEY_ALIAS")
            keyPassword System.getenv("RELEASE_KEY_PASSWORD")
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            useProguard false
            signingConfig signingConfigs.debug
            applicationIdSuffix '.debug'
            versionNameSuffix "-debug"
            debuggable true
            zipAlignEnabled true
            testCoverageEnabled true
        }
        release {
            signingConfig signingConfigs.release
            debuggable false
            zipAlignEnabled true
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
        develop {
            applicationId "${packageName}.develop"
            dimension "default"
        }
        staging {
            applicationId "${packageName}.staging"
            dimension "default"
        }
        production {
            applicationId packageName
            dimension "default"
        }
    }
    // Lintのオプション指定
    lintOptions {
        // issue IDを設定することで、設定したissue IDを無視
        disable 'InvalidPackage'
        // falseを設定することで、build中にlintのエラーが出てもbuildを止めないようにする
        abortOnError false
        // textReportとtextOutputを設定するとコマンドラインのビルドでlintのwarningやerrorが表示されるので
        // たとえばCIがlint errorで落ちたときに手元でlintを走らせることなく原因がわかる
        textReport true
        textOutput 'stdout'
        // lintの設定ファイルを指定
        lintConfig file("lint.xml")
    }
}
kapt {
    useBuildCache = true
}
repositories {
    mavenCentral()
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // ==================== Kotlin ====================
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "androidx.core:core-ktx:0.3"

    // ==================== Support Library ====================
    implementation "com.android.support:support-v4:${support_lib_version}"
    implementation "com.android.support:appcompat-v7:${support_lib_version}"
    implementation "com.android.support:design:${support_lib_version}"
    implementation "com.android.support:cardview-v7:${support_lib_version}"
    implementation "com.android.support:customtabs:${support_lib_version}"
    implementation "com.android.support:recyclerview-v7:${support_lib_version}"
    implementation "com.android.support:preference-v7:${support_lib_version}"
    implementation "com.android.support:preference-v14:${support_lib_version}"
    implementation "com.android.support:support-emoji-appcompat:${support_lib_version}"
    implementation "com.android.support:multidex:1.0.3"
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'

    // ==================== Network ====================
    /// HTTP/HTTP2.0のクライアント
    def okhttp_version = '3.9.1'
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    def retrofit2_version = '2.3.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofit2_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2_version"
    /// rxjavaとのアダプター
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit2_version"

    // ==================== Structure ====================
    implementation "se.ansman.kotshi:api:1.0.1"
    implementation "se.ansman.kotshi:compiler:1.0.1"

    // Architecture component
    // lifecycle
    def lifecycle_version = '1.1.1'
    implementation "android.arch.lifecycle:runtime:$lifecycle_version"
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"
    implementation "android.arch.lifecycle:reactivestreams:$lifecycle_version"

    // Room
    def room_version = '1.0.0'
    implementation "android.arch.persistence.room:runtime:$room_version"
    implementation "android.arch.persistence.room:rxjava2:$room_version"
    kapt "android.arch.persistence.room:compiler:$room_version"

    // Rx
    implementation 'io.reactivex.rxjava2:rxjava:2.1.13'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation "io.reactivex.rxjava2:rxkotlin:2.2.0"
    implementation "com.cantrowitz:rxbroadcast:2.0.0"

    // DataBinding
    kapt "com.android.databinding:compiler:3.1.2"

    // Dagger
    def dagger_version = '2.14.1'
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // Play Services (Firebase)
    def firebase_version = '15.0.0'
    implementation "com.google.firebase:firebase-core:$firebase_version"
    implementation "com.google.firebase:firebase-auth:$firebase_version"
    implementation "com.google.firebase:firebase-messaging:$firebase_version"
    implementation "com.google.firebase:firebase-firestore:$firebase_version"
    // Google Map
    implementation "com.google.android.gms:play-services-maps:$firebase_version"
    // location
    implementation "com.google.android.gms:play-services-location:$firebase_version"

    // 日時計算のライブラリ
    implementation "com.jakewharton.threetenabp:threetenabp:1.0.5"

    // KotlinでPrefに簡単にアクセス出来るように
    def kotpref_version = '2.3.0'
    implementation "com.chibatching.kotpref:kotpref:$kotpref_version"
    implementation "com.chibatching.kotpref:initializer:$kotpref_version"
    implementation "com.chibatching.kotpref:enum-support:$kotpref_version"

    // パーミッション取得簡単に
//    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.5@aar'

    /// DeployGate
    implementation 'com.deploygate:sdk:4.1.0'
    // ==================== UI ====================
    /// 画像の読み込みライブラリActivity/Fragmentのライフサイクルに沿った読み込み・開放処理をGlide側がいい感じに行ってくれる
    def glide_version = '4.7.1'
    implementation "com.github.bumptech.glide:glide:$glide_version"
    implementation "com.github.bumptech.glide:okhttp3-integration:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    implementation "com.google.android.gms:play-services-oss-licenses:$firebase_version"

    // あとで消すけど一旦入れておく
    implementation "com.xwray:groupie:2.0.3"
    implementation "com.xwray:groupie-databinding:2.0.3"
    implementation "com.github.takahirom.downloadable.calligraphy:downloadable-calligraphy:0.1.2"

    // ==================== Debug ====================
    def stetho_version = '1.5.0'
    debugImplementation "com.facebook.stetho:stetho:$stetho_version"
    debugImplementation "com.facebook.stetho:stetho-okhttp3:$stetho_version"

    implementation "com.crashlytics.sdk.android:crashlytics:2.9.2@aar"

    /// ログ取得
    implementation 'com.jakewharton.timber:timber:4.7.0'

    debugImplementation "com.squareup.leakcanary:leakcanary-android:1.5.4"

    def debot_version = '2.0.3'
    debugImplementation "com.tomoima.debot:debot:$debot_version"
    releaseImplementation "com.tomoima.debot:debot-no-op:$debot_version"

    // ==================== Test ====================
    testImplementation "junit:junit:4.12"
    testImplementation "com.nhaarman:mockito-kotlin:1.5.0"

    def robolectric_version = '3.6.1'
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    testImplementation "org.robolectric:shadows-multidex:$robolectric_version"

    testImplementation "com.willowtreeapps.assertk:assertk:0.9"

    testImplementation "org.threeten:threetenbp:1.3.6"

    androidTestImplementation "com.android.support.test:runner:1.0.2"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:3.0.2"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:3.0.2"
    androidTestImplementation "com.willowtreeapps.assertk:assertk:0.9"
}
//play {
//    uploadImages = true
//    setTrack("alpha") // 'production' or 'rollout' or 'beta' or 'alpha'
//    untrackOld = true
//    // userFraction = 0.1
////    jsonFile = file("publisher-keys.json")
//}
//
//ktlint {
//    version = "0.15.0"
//    android = true
//    reporter = ReporterType.CHECKSTYLE
//    ignoreFailures = true
//}

// MUST BE AT THE BOTTOM
// firebaseでgoogle-services.jsonを生成してから有効にすること
//apply plugin: 'com.google.gms.google-services'

//deploygate {
//    userName = "toshi"
//    token = System.getenv("DEPLOY_GATE_API_KEY")
//
//    apks {
//        create("release") {
//            val hash = Runtime.getRuntime().exec("git rev-parse --short HEAD").inputStream.reader().use { it.readText() }.trim()
//            message = "https://github.com/DroidKaigi/conference-app-2018/tree/$hash ${System.getenv("CIRCLE_BUILD_URL")}"
//
//            distributionKey = "aed2445665e27de6571227992d66ea489b6bdb44"
//            releaseNote = "https://github.com/DroidKaigi/conference-app-2018/tree/$hash ${System.getenv("CIRCLE_BUILD_URL")}"
//        }
//    }
//}
